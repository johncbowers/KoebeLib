plugins {
    id 'com.google.osdetector' version '1.4.0'
    id 'org.jetbrains.kotlin.jvm' version '1.2.10'
    id 'application'
    id 'antlr'
}

// Set the main class for application and jar building
//  - set in settings.gradle or 
//    defined with -Pmain=<class> in build command
mainClassName = project.findProperty('main') ?: gradle.ext.defaultClassName

// Use maven central repository for dependencies
repositories {
    mavenCentral()
}

dependencies {
    // Kotlin standard library
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    // KoebeLib dependencies
    compile files('lib/jar/cpcore.jar')
    compile 'org.python:jython-standalone:2.7.0'
    compile 'com.fifesoft:rsyntaxtextarea:2.6.1'
    compile 'org.jogamp.jogl:jogl-all-main:2.3.2'
    compile 'org.jogamp.gluegen:gluegen-rt-main:2.3.2'
    compile ('org.processing:core:3.3.6') {
        transitive = false
    }

    // Antlr dependency
    antlr 'org.antlr:antlr4:4.7.1'
}

task chkLib {
    group 'KoebeLib'
    description 'Ensure that the jar directory exists'

    doLast {
        def f = new File('lib/jar/')
        if (!f.exists()) { f.mkdirs() }
    }
}

task get_nix(type:Exec, dependsOn:chkLib) {
    group 'KoebeLib'
    description 'Downloads CirclePack and extracts cpcore.jar; *nix'

    workingDir 'lib/jar/'
    commandLine '../getCirclePack.sh'
}

task get_win(type:Exec, dependsOn:chkLib) {
    group 'KoebeLib'
    description 'Downloads CirclePack and extracts cpcore.jar; Windows'

    workingDir 'lib/jar/'
    commandLine 'powershell', '-ExecutionPolicy', 'RemoteSigned', '-c', '../getCirclePack.ps1'
}

task get {
    group 'KoebeLib'
    description 'Detect OS for downloading CirclePack'

    if (osdetector.os == 'windows') {
        dependsOn get_win
    }
    else {
        dependsOn get_nix
    }
}

// Only retrieve CirclePack cpcore.jar if not already done
def cpcore = new File('lib/jar/cpcore.jar')
get_nix.onlyIf { !cpcore.exists() }
get_win.onlyIf { !cpcore.exists() }

// Can't compile without cpcore.jar
compileKotlin.dependsOn(get)
compileKotlin.dependsOn(generateGrammarSource)

// Build jar with main class defined earlier
// Bundle all dependencies in the jar
jar {
    manifest {
        attributes 'Main-Class' : project['mainClassName']
    }

    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task run(type: JavaExec, dependsOn: jar, overwrite: true) {
   description 'Runs this project as a JVM application'
   group 'application'

   main project['mainClassName']
   classpath fileTree("$jar.destinationDir")
}

